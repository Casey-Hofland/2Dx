<docs>
    <Dimension>
        <is2DNot3D>
            <summary>Returns if Physics2Dx is currently operating in 2D instead of 3D.</summary>
        </is2DNot3D>
        <Convert>
            <summary>Converts the current Physics2Dx mode to the other.</summary>
        </Convert>
        <onConvert>
            <summary>Invoked whenever the Physics2Dx mode is converted.</summary>
        </onConvert>
        <conversionTime>
            <summary>The time it takes for the Physics2Dx mode to convert.</summary>
        </conversionTime>
        <waitForConversionTime>
            <summary>Suspends the coroutine execution for the amount of conversionTime.</summary>
        </waitForConversionTime>
        <isConverting>
            <summary>Returns if Physics2Dx is currently converting or not.</summary>
        </isConverting>
        <waitWhileConverting>
            <summary>Suspends the coroutine execution until Physics2Dx has stopped converting.</summary>
        </waitWhileConverting>
        <batchConversion>
            <summary>If enabled, the conversion is batched and converted over multiple frames, but never longer than the conversionTime.</summary>
        </batchConversion>
        <AddModule2DxInstance>
            <summary>Add a Module2Dx to the conversion set.</summary>
        </AddModule2DxInstance>
        <RemoveModule2DxInstance>
            <summary>Remove a Module2Dx from the conversion set.</summary>
        </RemoveModule2DxInstance>
        <ConvertModule2Dxes>
            <summary>Convert all Module2Dxes in the conversion set.</summary>
        </ConvertModule2Dxes>
    </Dimension>
    <PhysicsConverter>
        <PhysicMaterial>
            <summary>Converts a PhysicMaterial to its PhysicsMaterial2D equivalent.</summary>
            <param name="physicMaterial">The PhysicMaterial to convert.</param>
            <returns>The PhysicsMaterial2D equivalent.</returns>
        </PhysicMaterial>
        <PhysicsMaterial2D>
            <summary>Converts a PhysicsMaterial2D to its PhysicMaterial equivalent.</summary>
            <param name="physicsMaterial2D">The PhysicsMaterial2D to convert.</param>
            <returns>The PhysicMaterial equivalent.</returns>
        </PhysicsMaterial2D>
        <Rigidbody>
            <summary>Converts a Rigidbody to its Rigidbody2D equivalent.</summary>
            <param name="rigidbody">The Rigidbody to convert.</param>
            <param name="rigidbody2D">The Rigidbody2D to convert to.</param>
        </Rigidbody>
        <Rigidbody2D>
            <summary>Converts a Rigidbody2D to its Rigidbody equivalent.</summary>
            <param name="rigidbody2D">The Rigidbody2D to convert.</param>
            <param name="rigidbody">The Rigidbody to convert to.</param>
        </Rigidbody2D>
        <Collider>
            <summary>Converts a Collider to its Collider2D equivalent.</summary>
            <param name="collider">The Collider to convert.</param>
            <param name="collider2D">The Collider2D to convert to.</param>
        </Collider>
        <Collider2D>
            <summary>Converts a Collider2D to its Collider equivalent.</summary>
            <param name="collider2D">The Collider2D to convert to.</param>
            <param name="collider">The Collider to convert.</param>
        </Collider2D>
        <Sphere>
            <summary>Converts a SphereCollider to its CircleCollider2D equivalent.</summary>
            <param name="sphereCollider">The SphereCollider to convert.</param>
            <param name="circleCollider2D">The CircleCollider2D to convert to.</param>
        </Sphere>
        <Circle2D>
            <summary>Converts a CircleCollider2D to its SphereCollider equivalent.</summary>
            <param name="circleCollider2D">The CircleCollider2D to convert.</param>
            <param name="sphereCollider">The SphereCollider to convert to.</param>
        </Circle2D>
        <Capsule>
            <summary>Converts a CapsuleCollider to its CapsuleCollider2D equivalent.</summary>
            <param name="capsuleCollider">The CapsuleCollider to convert.</param>
            <param name="capsuleCollider2D">The CapsuleCollider2D to convert to.</param>
        </Capsule>
        <Capsule2D>
            <summary>Converts a CapsuleCollider2D to its CapsuleCollider equivalent.</summary>
            <param name="capsuleCollider2D">The CapsuleCollider2D to convert.</param>
            <param name="capsuleCollider">The CapsuleCollider to convert to.</param>
        </Capsule2D>
        <Box>
            <summary>Converts a BoxCollider to its PolygonCollider2D equivalent.</summary>
            <param name="boxCollider">The BoxCollider to convert.</param>
            <param name="polygonCollider2D">The PolygonCollider2D to convert to.</param>
        </Box>
        <Box2D>
            <summary>Converts a PolygonCollider2D to its BoxCollider equivalent.</summary>
            <param name="polygonCollider2D">The PolygonCollider2D to convert.</param>
            <param name="boxCollider">The BoxCollider to convert to.</param>
        </Box2D>
        <Box2DSafe>
            <summary>Converts a PolygonCollider2D to its BoxCollider equivalent if the PolygonCollider2D is an appropriate BoxCollider.</summary>
            <param name="polygonCollider2D">The BoxCollider2D to convert.</param>
            <param name="boxCollider">The BoxCollider to convert to.</param>
        </Box2DSafe>
        <Mesh>
            <summary>Converts a MeshCollider to its PolygonCollider2D equivalent.</summary>
            <param name="meshCollider">The MeshCollider to convert.</param>
            <param name="polygonCollider2D">The PolygonCollider2D to convert to.</param>
            <param name="renderSize">The render size to use when rendering out the MeshCollider as a Texture2D.</param>
        </Mesh>
        <Polygon2D>
            <summary>Converts a PolygonCollider2D to its MeshCollider equivalent.</summary>
            <param name="polygonCollider2D">The PolygonCollider2D to convert.</param>
            <param name="meshCollider">The MeshCollider to convert to.</param>
            <param name="converstionOptions">Options used to determine how to convert the PolygonCollider2D.</param>
        </Polygon2D>
    </PhysicsConverter>
    <PhysicsCopier>
        <Rigidbody>
            <summary>Copies a Rigidbody to another Rigidbody.</summary>
            <param name="rigidbody">The Rigidbody to copy from.</param>
            <param name="other">The Rigidbody to copy to.</param>
            <param name="setPosition">Copy the position.</param>
            <param name="setRotation">Copy the rotation.</param>
        </Rigidbody>
        <Rigidbody2D>
            <summary>Copies a Rigidbody2D to another Rigidbody2D.</summary>
            <param name="rigidbody2D">The Rigidbody2D to copy from.</param>
            <param name="other">The Rigidbody2D to copy to.</param>
            <param name="setPosition">Copy the position.</param>
            <param name="setRotation">Copy the rotation.</param>
        </Rigidbody2D>
        <Collider>
            <summary>Copies a Collider to another Collider.</summary>
            <param name="collider">The Collider to copy from.</param>
            <param name="other">The Collider to copy to.</param>
        </Collider>
        <Collider2D>
            <summary>Copies a Collider2D to another Collider2D.</summary>
            <param name="collider2D">The Collider2D to copy from.</param>
            <param name="other">The Collider2D to copy to.</param>
        </Collider2D>
        <Sphere>
            <summary>Copies a SphereCollider to another SphereCollider.</summary>
            <param name="sphereCollider">The SphereCollider to copy from.</param>
            <param name="other">The SphereCollider to copy to.</param>
        </Sphere>
        <Circle2D>
            <summary>Copies a CircleCollider2D to another CircleCollider2D.</summary>
            <param name="circleCollider2D">The CircleCollider2D to copy from.</param>
            <param name="other">The CircleCollider2D to copy to.</param>
        </Circle2D>
        <Capsule>
            <summary>Copies a CapsuleCollider to another CapsuleCollider.</summary>
            <param name="capsuleCollider">The CapsuleCollider to copy from.</param>
            <param name="other">The CapsuleCollider to copy to.</param>
        </Capsule>
        <Capsule2D>
            <summary>Copies a CapsuleCollider2D to another CapsuleCollider2D.</summary>
            <param name="capsuleCollider2D">The CapsuleCollider2D to copy from.</param>
            <param name="other">The CapsuleCollider2D to copy to.</param>
        </Capsule2D>
        <Box>
            <summary>Copies a BoxCollider to another BoxCollider.</summary>
            <param name="boxCollider">The BoxCollider to copy from.</param>
            <param name="other">The BoxCollider to copy to.</param>
        </Box>
        <Box2D>
            <summary>Copies a BoxCollider2D to another BoxCollider2D.</summary>
            <param name="boxCollider2D">The BoxCollider2D to copy from.</param>
            <param name="other">The BoxCollider2D to copy to.</param>
        </Box2D>
        <Mesh>
            <summary>Copies a MeshCollider to another MeshCollider.</summary>
            <param name="meshCollider">The MeshCollider to copy from.</param>
            <param name="other">The MeshCollider to copy to.</param>
        </Mesh>
        <Polygon2D>
            <summary>Copies a PolygonCollider2D to another PolygonCollider2D.</summary>
            <param name="polygonCollider2D">The PolygonCollider2D to copy from.</param>
            <param name="other">The PolygonCollider2D to copy to.</param>
        </Polygon2D>
    </PhysicsCopier>
    <BoxConverterTools>
        <IsBox>
            <summary>Checks if a PolygonCollider2D is representing a BoxCollider at a certain rotation.</summary>
            <param name="polygonCollider2D">The PolygonCollider2D to check.</param>
            <param name="rotation">The rotation to check.</param>
        </IsBox>
        <CreateBox>
            <summary>Creates a box out of a PolygonCollider2D.</summary>
            <param name="polygonCollider2D">The PolygonCollider2D to create a box out of.</param>
            <param name="rotation">The rotation of the box.</param>
            <param name="size">The size of the box.</param>
        </CreateBox>
        <Box2D>
            <summary>Converts a BoxCollider2D to a PolygonCollider2D.</summary>
            <param name="boxCollider2D">The BoxCollider2D to convert to.</param>
            <param name="polygonCollider2D">The PolygonCollider2D to convert to.</param>
        </Box2D>
    </BoxConverterTools>
    <Converter>
        <Convert>
            <summary>Converts this Converter to the specified Physics2Dx mode.</summary>
        </Convert>
        <ConvertTo2D>
            <summary>Converts this Converter to its 2D form.</summary>
        </ConvertTo2D>
        <ConvertTo3D>
            <summary>Converts this Converter to its 3D form.</summary>
        </ConvertTo3D>
    </Converter>
    <ColliderConverter>
        <GetPairedCollider2D>
            <summary>Get the Collider2D that is paired to this Collider.</summary>
            <returns>The paired Collider2D or null if none.</returns>
        </GetPairedCollider2D>
        <GetPairedCollider>
            <summary>Get the Collider that is paired to this Collider2D.</summary>
            <returns>The paired Collider or null if none.</returns>
        </GetPairedCollider>
        <ColliderToCollider>
            <summary>Copies one Colliders properties to another.</summary>
            <param name="collider">The Collider to copy from.</param>
            <param name="other">The Collider to copy to.</param>
        </ColliderToCollider>
        <Collider2DToCollider2D>
            <summary>Copies one Collider2Ds properties to another.</summary>
            <param name="collider2D">The Collider2D to copy from.</param>
            <param name="other">The Collider2D to copy to.</param>
        </Collider2DToCollider2D>
        <AddCollider>
            <summary>Add a <typeparamref name="C"/> and create and pair it with a <typeparamref name="C2D"/>.</summary>
            <param name="copyOf">The Collider to copy from.</param>
        </AddCollider>
        <AddCollider2D>
            <summary>Add a <typeparamref name="C2D"/> and create and pair it with a <typeparamref name="C"/>.</summary>
            <param name="copyOf">The Collider2D to copy from.</param>
        </AddCollider2D>
        <DestroyPairedColliders>
            <summary>Destroy a Collider Collider2D pair.</summary>
            <param name="collider">The Collider of the pair to destroy.</param>
            <param name="collider2D">The Collider2D of the pair to destroy.</param>
            <param name="index">The index of the pair to destroy.</param>
        </DestroyPairedColliders>
        <UpdateColliders>
            <summary>Update the paired Colliders to remove any destroyed Colliders or recreate any destroyed Collider2Ds.</summary>
        </UpdateColliders>
        <CacheColliders>
            <summary>Iterate through all <typeparamref name="C"/> on the Collider2Dx and the Transform3D and add them if they weren't already added.</summary>
        </CacheColliders>
        <UpdateCollider2Ds>
            <summary>Update the paired Collider2Ds to remove any destroyed Collider2Ds or recreate any destroyed Colliders.</summary>
        </UpdateCollider2Ds>
        <CacheCollider2Ds>
            <summary>Iterate through all <typeparamref name="C2D"/> on the Collider2Dx and the Transform2D and add them if they weren't already added.</summary>
        </CacheCollider2Ds>
        <ColliderToCollider2D>
            <summary>Converts a Collider to a Collider2D.</summary>
            <param name="collider">The Collider to convert.</param>
            <param name="collider2D">The Collider2D to convert to.</param>
        </ColliderToCollider2D>
        <Collider2DToCollider>
            <summary>Converts a Collider2D to a Collider.</summary>
            <param name="collider2D">The Collider2D to convert.</param>
            <param name="collider">The Collider to convert to.</param>
        </Collider2DToCollider>
    </ColliderConverter>
    <BoxConverter>
        <AddBoxCollider2D>
            <summary>Add a <typeparamref name="C2D"/> from a BoxCollider2D and create and pair it with a <typeparamref name="C"/>.</summary>
            <param name="copyOf">The BoxCollider2D to copy from.</param>
        </AddBoxCollider2D>
        <CacheCollider2Ds>
            <summary>Iterate through all <typeparamref name="C2D"/> and BoxCollider2Ds on the Collider2Dx and the Transform2D and add them if they weren't already added.</summary>
        </CacheCollider2Ds>
    </BoxConverter>
    <RigidbodyConverter>
        <AddRigidbody>
            <summary>Add a Rigidbody and cache it to the converter.</summary>
            <param name="copyOf">The Rigidbody to copy from.</param>
        </AddRigidbody>
        <AddRigidbody2D>
            <summary>Add a Rigidbody2D and cache it to the converter.</summary>
            <param name="copyOf">The Rigidbody2D to copy from.</param>
        </AddRigidbody2D>
        <IgnoreOverlap>
            <summary>Find all 2D colliders that are overlapping the rigidbody2D and ignore them.</summary>
        </IgnoreOverlap>
        <ClearOverlap>
            <summary>Clear the list of ignored colliders.</summary>
        </ClearOverlap>
        <UpdateOverlap>
            <summary>Update the ignored colliders by checking if they still overlap the rigidbody2D.</summary>
        </UpdateOverlap>
        <angularDrag>
            <summary>Angular drag of the currenty rigidbody.</summary>
        </angularDrag>
        <angularVelocity>
            <summary>Angular velocity of the currenty rigidbody.</summary>
        </angularVelocity>
        <centerOfMass>
            <summary>Center of mass of the currenty rigidbody.</summary>
        </centerOfMass>
        <constraints>
            <summary>Constraints of the currenty rigidbody.</summary>
        </constraints>
        <drag>
            <summary>Drag of the currenty rigidbody.</summary>
        </drag>
        <freezeRotation>
            <summary>If the currenty rigidbody should freeze its rotation.</summary>
        </freezeRotation>
        <interpolation>
            <summary>Interpolation of the currenty rigidbody.</summary>
        </interpolation>
        <isKinematic>
            <summary>If currenty rigidbody is kinematic.</summary>
        </isKinematic>
        <mass>
            <summary>Mass of the currenty rigidbody.</summary>
        </mass>
        <position>
            <summary>Position of the currenty rigidbody.</summary>
        </position>
        <rotation>
            <summary>Rotation of the currenty rigidbody.</summary>
        </rotation>
        <velocity>
            <summary>Velocity of the currenty rigidbody.</summary>
        </velocity>
        <worldCenterOfMass>
            <summary>WorldCenterOfMass of the currenty rigidbody.</summary>
        </worldCenterOfMass>
        <AddForce>
            <summary>Calls AddForce on the currenty rigidbody.</summary>
        </AddForce>
        <AddForceAtPosition>
            <summary>Calls AddForceAtPosition on the currenty rigidbody.</summary>
        </AddForceAtPosition>
        <AddRelativeForce>
            <summary>Calls AddRelativeForce on the currenty rigidbody.</summary>
        </AddRelativeForce>
        <AddTorque>
            <summary>Calls AddTorque on the currenty rigidbody.</summary>
        </AddTorque>
        <GetPointVelocity>
            <summary>Calls GetPointVelocity on the currenty rigidbody.</summary>
        </GetPointVelocity>
        <GetRelativePointVelocity>
            <summary>Calls GetRelativePointVelocity on the currenty rigidbody.</summary>
        </GetRelativePointVelocity>
        <IsSleeping>
            <summary>Calls IsSleeping on the currenty rigidbody.</summary>
        </IsSleeping>
        <MovePosition>
            <summary>Calls MovePosition on the currenty rigidbody.</summary>
        </MovePosition>
        <MoveRotation>
            <summary>Calls MoveRotation on the currenty rigidbody.</summary>
        </MoveRotation>
        <Sleep>
            <summary>Calls Sleep on the currenty rigidbody.</summary>
        </Sleep>
        <WakeUp>
            <summary>Calls WakeUp on the currenty rigidbody.</summary>
        </WakeUp>
    </RigidbodyConverter>
    <CameraConverter>
        <SetView>
            <summary>Set the camera's view projection.</summary>
            <param name="toOrthographicNotPerspective">If the view projection should be set to orthographic or perspective.</param>
        </SetView>
        <ChangeView>
            <summary>Change the camera's view projection over the conversion time.</summary>
            <param name="toOrthographicNotPerspective">If the view projection should be set to orthographic or perspective.</param>
        </ChangeView>
    </CameraConverter>
</docs>
